#!/home/pi/.local/minitel/bin/python -u
# -*- coding: utf-8 -*-
"""Connecte le Minitel se trouvant sur le port sÃ©rie sur un service websocket
Synopsis:
    minitelws ws://go.minipavi.fr:8182' /dev/ttyAMA0 9600 VIDEOTEX
              URL                       DEVICE       SPEED MODE
"""

import serial
import asyncio
import websockets
from sys import argv

from minitel.Minitel import Minitel

adresse = argv[1] if len(argv) > 1 else 'ws://go.minipavi.fr:8182'
peripherique = str(argv[2]) if len(argv) > 2 else '/dev/ttyAMA0'
vitesse = int(argv[3]) if len(argv) > 3 else 9600
mode = str(argv[4]) if len(argv) > 4 else 'VIDEOTEX'

minitel = Minitel( peripherique = peripherique )

minitel.deviner_vitesse()
minitel.identifier()
minitel.definir_vitesse(vitesse)
minitel.definir_mode(mode)
minitel.configurer_clavier(etendu = True, curseur = False, minuscule = True)
# cancel local echo (keyboard > modem > screen)
minitel.echo(False)
minitel.efface()
minitel.curseur(False)
minitel.close()

ser = None  # serial connection
ws = None   # websocket connection

watchdog=0

async def bridge(url, tty, speed):
    "Initializes connection to websocket and local serial port"
    global ser, ws

    ser = serial.Serial(tty, speed, parity=serial.PARITY_EVEN,
                        bytesize=7, timeout=1)
    try:
        ws = await websockets.connect(url)
    except websockets.ConnectionClosed:
        print("Connection closed")

    ser.write(b'\x07\x0c\x1f\x40\x41connexion\x0a')


async def w2m():
    "websocket > minitel"
    while (True):
        data = await ws.recv()
        print(' ', end='')
        ser.write(data.encode())

async def m2w():
    "websocket < minitel"
    global watchdog
    while (True):
        if ser.inWaiting() > 0:
            tosend = ser.read(ser.inWaiting()).decode()
            print(tosend, end='')
            await ws.send(tosend)
            watchdog+=1
        else:
            if watchdog > 600:
              print('!',end='')
              loop = asyncio.get_running_loop()
              # loop.create_task(exit())
              watchdog = 0
            else:
              watchdog+=1
              await asyncio.sleep(0.1)

async def noecho():
    "periodically disable echo on minitel"
    while (True):
      ser.write(b'\x1b\x3b\x60\x58\x52')
      await asyncio.sleep(5)

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.run_until_complete(bridge(adresse, peripherique, vitesse))
    loop.run_until_complete(asyncio.gather(w2m(), m2w(), noecho()))
